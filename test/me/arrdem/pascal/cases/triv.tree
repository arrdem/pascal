; installing standard macros...
; standard macros installed!
; installing standard library...
; standard library installed!
; installing standard types...
; standard types installed!
; dropping into program graph1
(program
  "graph1"
  (progn "output")
  (comment "defined variables" "graph1/i")
  (progn (:= "graph1/i" 3)))
; ------------------------------------------------------------------------------
;  sqrt
;      :name => sqrt
;      :arity-and-type-set => #{real}
;      :ret-type => real
;      :class => me.arrdem.compiler.symbols.FunctionType
;      :qname => sqrt
;
;  new
;     :name => new
;     :expander => #<stdmacros$p_new_macro me.arrdem.pascal.symtab.stdmacros$p_new_macro@4dbbb9f>
;     :class => me.arrdem.compiler.macros.MacroType
;     :qname => new
;
;  ^integer
;          :name => ^integer
;          :size-field => 4
;          :ref => integer
;          :class => me.arrdem.compiler.symbols.PointerType
;          :qname => ^integer
;
;  writeln
;         :name => writeln
;         :arity-and-type-set => #{char}
;         :ret-type => nil
;         :class => me.arrdem.compiler.symbols.FunctionType
;         :qname => writeln
;
;  ord
;     :name => ord
;     :arity-and-type-set => #{char}
;     :ret-type => integer
;     :class => me.arrdem.compiler.symbols.FunctionType
;     :qname => ord
;
;  itof
;      :name => itof
;      :arity-and-type-set => #{integer}
;      :ret-type => real
;      :class => me.arrdem.compiler.symbols.FunctionType
;      :qname => itof
;
;  trnew
;       :name => trnew
;       :arity-and-type-set => #{integer}
;       :ret-type => integer
;       :class => me.arrdem.compiler.symbols.FunctionType
;       :qname => trnew
;
;  graph1
;        :class => clojure.lang.PersistentArrayMap
;  graph1/i
;          :name => i
;          :type => integer
;          :val => nil
;          :class => me.arrdem.compiler.symbols.VariableType
;          :qname => graph1/i
;
;
;  iround
;        :name => iround
;        :arity-and-type-set => #{real}
;        :ret-type => integer
;        :class => me.arrdem.compiler.symbols.FunctionType
;        :qname => iround
;
;  writelnf
;          :name => writelnf
;          :arity-and-type-set => #{real}
;          :ret-type => nil
;          :class => me.arrdem.compiler.symbols.FunctionType
;          :qname => writelnf
;
;  writef
;        :name => writef
;        :arity-and-type-set => #{real}
;        :ret-type => nil
;        :class => me.arrdem.compiler.symbols.FunctionType
;        :qname => writef
;
;  cos
;     :name => cos
;     :arity-and-type-set => #{real}
;     :ret-type => real
;     :class => me.arrdem.compiler.symbols.FunctionType
;     :qname => cos
;
;  boolean
;         :name => boolean
;         :size-field => 4
;         :class => me.arrdem.compiler.symbols.PrimitiveType
;         :qname => boolean
;
;  writelni
;          :name => writelni
;          :arity-and-type-set => #{integer}
;          :ret-type => nil
;          :class => me.arrdem.compiler.symbols.FunctionType
;          :qname => writelni
;
;  writei
;        :name => writei
;        :arity-and-type-set => #{integer}
;        :ret-type => nil
;        :class => me.arrdem.compiler.symbols.FunctionType
;        :qname => writei
;
;  ^boolean
;          :name => ^boolean
;          :size-field => 4
;          :ref => boolean
;          :class => me.arrdem.compiler.symbols.PointerType
;          :qname => ^boolean
;
;  ctoi
;      :name => ctoi
;      :arity-and-type-set => #{char}
;      :ret-type => integer
;      :class => me.arrdem.compiler.symbols.FunctionType
;      :qname => ctoi
;
;  btoi
;      :name => btoi
;      :arity-and-type-set => #{boolean}
;      :ret-type => integer
;      :class => me.arrdem.compiler.symbols.FunctionType
;      :qname => btoi
;
;  ^niltype
;          :name => ^niltype
;          :size-field => 0
;          :class => me.arrdem.compiler.symbols.PrimitiveType
;          :qname => ^niltype
;
;  round
;       :name => round
;       :arity-and-type-set => #{real}
;       :ret-type => real
;       :class => me.arrdem.compiler.symbols.FunctionType
;       :qname => round
;
;  nil
;     :name => nil
;     :val => 0
;     :class => me.arrdem.compiler.symbols.VariableType
;     :qname => nil
;  nil/:type
;           :name => ^niltype
;           :size-field => 0
;           :class => me.arrdem.compiler.symbols.PrimitiveType
;
;
;  progn
;       :name => progn
;       :expander => #<stdmacros$progn_inliner me.arrdem.pascal.symtab.stdmacros$progn_inliner@2a5a334>
;       :class => me.arrdem.compiler.macros.MacroType
;       :qname => progn
;
;  ^char
;       :name => ^char
;       :size-field => 4
;       :ref => char
;       :class => me.arrdem.compiler.symbols.PointerType
;       :qname => ^char
;
;  read
;      :name => read
;      :arity-and-type-set => #{}
;      :ret-type => nil
;      :class => me.arrdem.compiler.symbols.FunctionType
;      :qname => read
;
;  char
;      :name => char
;      :size-field => 1
;      :class => me.arrdem.compiler.symbols.PrimitiveType
;      :qname => char
;
;  sin
;     :name => sin
;     :arity-and-type-set => #{real}
;     :ret-type => real
;     :class => me.arrdem.compiler.symbols.FunctionType
;     :qname => sin
;
;  readln
;        :name => readln
;        :arity-and-type-set => #{}
;        :ret-type => nil
;        :class => me.arrdem.compiler.symbols.FunctionType
;        :qname => readln
;
;  trsin
;       :name => trsin
;       :arity-and-type-set => #{real}
;       :ret-type => real
;       :class => me.arrdem.compiler.symbols.FunctionType
;       :qname => trsin
;
;  eof
;     :name => eof
;     :arity-and-type-set => #{}
;     :ret-type => boolean
;     :class => me.arrdem.compiler.symbols.FunctionType
;     :qname => eof
;
;  ^real
;       :name => ^real
;       :size-field => 4
;       :ref => real
;       :class => me.arrdem.compiler.symbols.PointerType
;       :qname => ^real
;
;  exp
;     :name => exp
;     :arity-and-type-set => #{real}
;     :ret-type => real
;     :class => me.arrdem.compiler.symbols.FunctionType
;     :qname => exp
;
;  integer
;         :name => integer
;         :size-field => 4
;         :class => me.arrdem.compiler.symbols.PrimitiveType
;         :qname => integer
;
;  real
;      :name => real
;      :size-field => 8
;      :class => me.arrdem.compiler.symbols.PrimitiveType
;      :qname => real
;
;  trexp
;       :name => trexp
;       :arity-and-type-set => #{real}
;       :ret-type => real
;       :class => me.arrdem.compiler.symbols.FunctionType
;       :qname => trexp
;
;  write
;       :name => write
;       :arity-and-type-set => #{char}
;       :ret-type => nil
;       :class => me.arrdem.compiler.symbols.FunctionType
;       :qname => write
;
()
